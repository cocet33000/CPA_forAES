#!/bin/env python
# -*- coding: shift_jis -*-
#
# Written by Takeshi Sugawara
# 2010/July/02

"""
AES を実行するためのクラス
"""
import utility

def _byte2word(byte1, byte2, byte3, byte4):    # 4 つの uint8 を，uint32 に変換する
    return (byte1 << 24) | (byte2 << 16) | (byte3 << 8) | byte4 

def _word2byte(word):     # uint32 を 4 つの uint8 に変換する
    a0 = ( word >> 24 ) % 256
    a1 = ( word >> 16 ) % 256
    a2 = ( word >> 8  ) % 256
    a3 = ( word       ) % 256
    return [a0, a1, a2, a3]

def _rotateRight8(data):
    return int( (data >> 8 & 0x00ffffff) | (data << 24 & 0xff000000) )

def _applyTable(word, table):
    (b0, b1, b2, b3) = _word2byte(word)
    tmp = _rotateRight8(table[b3])
    tmp = _rotateRight8(tmp ^ table[b2])
    tmp = _rotateRight8(tmp ^ table[b1])
    tmp ^= table[b0]
    return tmp

def SBMX32(uint32val):         return _applyTable(uint32val, _tbox)
def invSBMX32(uint32val):      return _applyTable(uint32val, _invTbox)
def mixColumn32(uint32val):    return _applyTable(uint32val, _mixColumnTable)
def invMixColumn32(uint32val): return _applyTable(uint32val, _invMixColumnTable)

def shiftRow128(uint32List):
    assert len(uint32List) == 4
    result = [None for i in range(4)]
    (st00, st10, st20, st30) = _word2byte(uint32List[0])
    (st01, st11, st21, st31) = _word2byte(uint32List[1])
    (st02, st12, st22, st32) = _word2byte(uint32List[2])
    (st03, st13, st23, st33) = _word2byte(uint32List[3])
    result[0] = _byte2word(st00, st11, st22, st33)
    result[1] = _byte2word(st01, st12, st23, st30)        
    result[2] = _byte2word(st02, st13, st20, st31)
    result[3] = _byte2word(st03, st10, st21, st32)
    return result

def invShiftRow128(uint32List):
    assert len(uint32List) == 4
    result = [None for i in range(4)]
    (st00, st10, st20, st30) = _word2byte(uint32List[0])
    (st01, st11, st21, st31) = _word2byte(uint32List[1])
    (st02, st12, st22, st32) = _word2byte(uint32List[2])
    (st03, st13, st23, st33) = _word2byte(uint32List[3])
    result[0] = _byte2word(st00, st13, st22, st31)
    result[1] = _byte2word(st01, st10, st23, st32)        
    result[2] = _byte2word(st02, st11, st20, st33)
    result[3] = _byte2word(st03, st12, st21, st30)
    return result

def subWord(word): 
    [a0, a1, a2, a3] = _word2byte(word)
    return _byte2word( sbox[a0], sbox[a1], sbox[a2], sbox[a3] )

def invSubWord(word):
    [a0, a1, a2, a3] = _word2byte(word)
    return _byte2word( invSbox[a0], invSbox[a1], invSbox[a2], invSbox[a3] )

sbox = (0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16)

invSbox = (0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
           0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
           0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
           0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
           0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
           0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
           0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
           0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
           0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
           0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
           0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
           0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
           0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
           0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
           0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
           0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d)

_Rcon = (0x01000000, 0x02000000, 0x04000000, 0x08000000,
         0x10000000, 0x20000000, 0x40000000, 0x80000000,
         0x1b000000, 0x36000000)

_tbox = (0xC66363A5, 0xF87C7C84, 0xEE777799, 0xF67B7B8D, 0xFFF2F20D, 0xD66B6BBD,
         0xDE6F6FB1, 0x91C5C554, 0x60303050, 0x02010103, 0xCE6767A9, 0x562B2B7D,
         0xE7FEFE19, 0xB5D7D762, 0x4DABABE6, 0xEC76769A, 0x8FCACA45, 0x1F82829D,
         0x89C9C940, 0xFA7D7D87, 0xEFFAFA15, 0xB25959EB, 0x8E4747C9, 0xFBF0F00B,
         0x41ADADEC, 0xB3D4D467, 0x5FA2A2FD, 0x45AFAFEA, 0x239C9CBF, 0x53A4A4F7,
         0xE4727296, 0x9BC0C05B, 0x75B7B7C2, 0xE1FDFD1C, 0x3D9393AE, 0x4C26266A,
         0x6C36365A, 0x7E3F3F41, 0xF5F7F702, 0x83CCCC4F, 0x6834345C, 0x51A5A5F4,
         0xD1E5E534, 0xF9F1F108, 0xE2717193, 0xABD8D873, 0x62313153, 0x2A15153F,
         0x0804040C, 0x95C7C752, 0x46232365, 0x9DC3C35E, 0x30181828, 0x379696A1,
         0x0A05050F, 0x2F9A9AB5, 0x0E070709, 0x24121236, 0x1B80809B, 0xDFE2E23D,
         0xCDEBEB26, 0x4E272769, 0x7FB2B2CD, 0xEA75759F, 0x1209091B, 0x1D83839E,
         0x582C2C74, 0x341A1A2E, 0x361B1B2D, 0xDC6E6EB2, 0xB45A5AEE, 0x5BA0A0FB,
         0xA45252F6, 0x763B3B4D, 0xB7D6D661, 0x7DB3B3CE, 0x5229297B, 0xDDE3E33E,
         0x5E2F2F71, 0x13848497, 0xA65353F5, 0xB9D1D168, 0x00000000, 0xC1EDED2C,
         0x40202060, 0xE3FCFC1F, 0x79B1B1C8, 0xB65B5BED, 0xD46A6ABE, 0x8DCBCB46,
         0x67BEBED9, 0x7239394B, 0x944A4ADE, 0x984C4CD4, 0xB05858E8, 0x85CFCF4A,
         0xBBD0D06B, 0xC5EFEF2A, 0x4FAAAAE5, 0xEDFBFB16, 0x864343C5, 0x9A4D4DD7,
         0x66333355, 0x11858594, 0x8A4545CF, 0xE9F9F910, 0x04020206, 0xFE7F7F81,
         0xA05050F0, 0x783C3C44, 0x259F9FBA, 0x4BA8A8E3, 0xA25151F3, 0x5DA3A3FE,
         0x804040C0, 0x058F8F8A, 0x3F9292AD, 0x219D9DBC, 0x70383848, 0xF1F5F504,
         0x63BCBCDF, 0x77B6B6C1, 0xAFDADA75, 0x42212163, 0x20101030, 0xE5FFFF1A,
         0xFDF3F30E, 0xBFD2D26D, 0x81CDCD4C, 0x180C0C14, 0x26131335, 0xC3ECEC2F,
         0xBE5F5FE1, 0x359797A2, 0x884444CC, 0x2E171739, 0x93C4C457, 0x55A7A7F2,
         0xFC7E7E82, 0x7A3D3D47, 0xC86464AC, 0xBA5D5DE7, 0x3219192B, 0xE6737395,
         0xC06060A0, 0x19818198, 0x9E4F4FD1, 0xA3DCDC7F, 0x44222266, 0x542A2A7E,
         0x3B9090AB, 0x0B888883, 0x8C4646CA, 0xC7EEEE29, 0x6BB8B8D3, 0x2814143C,
         0xA7DEDE79, 0xBC5E5EE2, 0x160B0B1D, 0xADDBDB76, 0xDBE0E03B, 0x64323256,
         0x743A3A4E, 0x140A0A1E, 0x924949DB, 0x0C06060A, 0x4824246C, 0xB85C5CE4,
         0x9FC2C25D, 0xBDD3D36E, 0x43ACACEF, 0xC46262A6, 0x399191A8, 0x319595A4,
         0xD3E4E437, 0xF279798B, 0xD5E7E732, 0x8BC8C843, 0x6E373759, 0xDA6D6DB7,
         0x018D8D8C, 0xB1D5D564, 0x9C4E4ED2, 0x49A9A9E0, 0xD86C6CB4, 0xAC5656FA,
         0xF3F4F407, 0xCFEAEA25, 0xCA6565AF, 0xF47A7A8E, 0x47AEAEE9, 0x10080818,
         0x6FBABAD5, 0xF0787888, 0x4A25256F, 0x5C2E2E72, 0x381C1C24, 0x57A6A6F1,
         0x73B4B4C7, 0x97C6C651, 0xCBE8E823, 0xA1DDDD7C, 0xE874749C, 0x3E1F1F21,
         0x964B4BDD, 0x61BDBDDC, 0x0D8B8B86, 0x0F8A8A85, 0xE0707090, 0x7C3E3E42,
         0x71B5B5C4, 0xCC6666AA, 0x904848D8, 0x06030305, 0xF7F6F601, 0x1C0E0E12,
         0xC26161A3, 0x6A35355F, 0xAE5757F9, 0x69B9B9D0, 0x17868691, 0x99C1C158,
         0x3A1D1D27, 0x279E9EB9, 0xD9E1E138, 0xEBF8F813, 0x2B9898B3, 0x22111133,
         0xD26969BB, 0xA9D9D970, 0x078E8E89, 0x339494A7, 0x2D9B9BB6, 0x3C1E1E22,
         0x15878792, 0xC9E9E920, 0x87CECE49, 0xAA5555FF, 0x50282878, 0xA5DFDF7A,
         0x038C8C8F, 0x59A1A1F8, 0x09898980, 0x1A0D0D17, 0x65BFBFDA, 0xD7E6E631,
         0x844242C6, 0xD06868B8, 0x824141C3, 0x299999B0, 0x5A2D2D77, 0x1E0F0F11,
         0x7BB0B0CB, 0xA85454FC, 0x6DBBBBD6, 0x2C16163A)

_invTbox = (0x51F4A750, 0x7E416553, 0x1A17A4C3, 0x3A275E96, 0x3BAB6BCB, 0x1F9D45F1,
            0xACFA58AB, 0x4BE30393, 0x2030FA55, 0xAD766DF6, 0x88CC7691, 0xF5024C25,
            0x4FE5D7FC, 0xC52ACBD7, 0x26354480, 0xB562A38F, 0xDEB15A49, 0x25BA1B67,
            0x45EA0E98, 0x5DFEC0E1, 0xC32F7502, 0x814CF012, 0x8D4697A3, 0x6BD3F9C6,
            0x038F5FE7, 0x15929C95, 0xBF6D7AEB, 0x955259DA, 0xD4BE832D, 0x587421D3,
            0x49E06929, 0x8EC9C844, 0x75C2896A, 0xF48E7978, 0x99583E6B, 0x27B971DD,
            0xBEE14FB6, 0xF088AD17, 0xC920AC66, 0x7DCE3AB4, 0x63DF4A18, 0xE51A3182,
            0x97513360, 0x62537F45, 0xB16477E0, 0xBB6BAE84, 0xFE81A01C, 0xF9082B94,
            0x70486858, 0x8F45FD19, 0x94DE6C87, 0x527BF8B7, 0xAB73D323, 0x724B02E2,
            0xE31F8F57, 0x6655AB2A, 0xB2EB2807, 0x2FB5C203, 0x86C57B9A, 0xD33708A5,
            0x302887F2, 0x23BFA5B2, 0x02036ABA, 0xED16825C, 0x8ACF1C2B, 0xA779B492,
            0xF307F2F0, 0x4E69E2A1, 0x65DAF4CD, 0x0605BED5, 0xD134621F, 0xC4A6FE8A,
            0x342E539D, 0xA2F355A0, 0x058AE132, 0xA4F6EB75, 0x0B83EC39, 0x4060EFAA,
            0x5E719F06, 0xBD6E1051, 0x3E218AF9, 0x96DD063D, 0xDD3E05AE, 0x4DE6BD46,
            0x91548DB5, 0x71C45D05, 0x0406D46F, 0x605015FF, 0x1998FB24, 0xD6BDE997,
            0x894043CC, 0x67D99E77, 0xB0E842BD, 0x07898B88, 0xE7195B38, 0x79C8EEDB,
            0xA17C0A47, 0x7C420FE9, 0xF8841EC9, 0x00000000, 0x09808683, 0x322BED48,
            0x1E1170AC, 0x6C5A724E, 0xFD0EFFFB, 0x0F853856, 0x3DAED51E, 0x362D3927,
            0x0A0FD964, 0x685CA621, 0x9B5B54D1, 0x24362E3A, 0x0C0A67B1, 0x9357E70F,
            0xB4EE96D2, 0x1B9B919E, 0x80C0C54F, 0x61DC20A2, 0x5A774B69, 0x1C121A16,
            0xE293BA0A, 0xC0A02AE5, 0x3C22E043, 0x121B171D, 0x0E090D0B, 0xF28BC7AD,
            0x2DB6A8B9, 0x141EA9C8, 0x57F11985, 0xAF75074C, 0xEE99DDBB, 0xA37F60FD,
            0xF701269F, 0x5C72F5BC, 0x44663BC5, 0x5BFB7E34, 0x8B432976, 0xCB23C6DC,
            0xB6EDFC68, 0xB8E4F163, 0xD731DCCA, 0x42638510, 0x13972240, 0x84C61120,
            0x854A247D, 0xD2BB3DF8, 0xAEF93211, 0xC729A16D, 0x1D9E2F4B, 0xDCB230F3,
            0x0D8652EC, 0x77C1E3D0, 0x2BB3166C, 0xA970B999, 0x119448FA, 0x47E96422,
            0xA8FC8CC4, 0xA0F03F1A, 0x567D2CD8, 0x223390EF, 0x87494EC7, 0xD938D1C1,
            0x8CCAA2FE, 0x98D40B36, 0xA6F581CF, 0xA57ADE28, 0xDAB78E26, 0x3FADBFA4,
            0x2C3A9DE4, 0x5078920D, 0x6A5FCC9B, 0x547E4662, 0xF68D13C2, 0x90D8B8E8,
            0x2E39F75E, 0x82C3AFF5, 0x9F5D80BE, 0x69D0937C, 0x6FD52DA9, 0xCF2512B3,
            0xC8AC993B, 0x10187DA7, 0xE89C636E, 0xDB3BBB7B, 0xCD267809, 0x6E5918F4,
            0xEC9AB701, 0x834F9AA8, 0xE6956E65, 0xAAFFE67E, 0x21BCCF08, 0xEF15E8E6,
            0xBAE79BD9, 0x4A6F36CE, 0xEA9F09D4, 0x29B07CD6, 0x31A4B2AF, 0x2A3F2331,
            0xC6A59430, 0x35A266C0, 0x744EBC37, 0xFC82CAA6, 0xE090D0B0, 0x33A7D815,
            0xF104984A, 0x41ECDAF7, 0x7FCD500E, 0x1791F62F, 0x764DD68D, 0x43EFB04D,
            0xCCAA4D54, 0xE49604DF, 0x9ED1B5E3, 0x4C6A881B, 0xC12C1FB8, 0x4665517F,
            0x9D5EEA04, 0x018C355D, 0xFA877473, 0xFB0B412E, 0xB3671D5A, 0x92DBD252,
            0xE9105633, 0x6DD64713, 0x9AD7618C, 0x37A10C7A, 0x59F8148E, 0xEB133C89,
            0xCEA927EE, 0xB761C935, 0xE11CE5ED, 0x7A47B13C, 0x9CD2DF59, 0x55F2733F,
            0x1814CE79, 0x73C737BF, 0x53F7CDEA, 0x5FFDAA5B, 0xDF3D6F14, 0x7844DB86,
            0xCAAFF381, 0xB968C43E, 0x3824342C, 0xC2A3405F, 0x161DC372, 0xBCE2250C,
            0x283C498B, 0xFF0D9541, 0x39A80171, 0x080CB3DE, 0xD8B4E49C, 0x6456C190,
            0x7BCB8461, 0xD532B670, 0x486C5C74, 0xD0B85742)

_mixColumnTable = (0x00000000, 0x02010103, 0x04020206, 0x06030305, 0x0804040c, 0x0a05050f,
                   0x0c06060a, 0x0e070709, 0x10080818, 0x1209091b, 0x140a0a1e, 0x160b0b1d,
                   0x180c0c14, 0x1a0d0d17, 0x1c0e0e12, 0x1e0f0f11, 0x20101030, 0x22111133,
                   0x24121236, 0x26131335, 0x2814143c, 0x2a15153f, 0x2c16163a, 0x2e171739,
                   0x30181828, 0x3219192b, 0x341a1a2e, 0x361b1b2d, 0x381c1c24, 0x3a1d1d27,
                   0x3c1e1e22, 0x3e1f1f21, 0x40202060, 0x42212163, 0x44222266, 0x46232365,
                   0x4824246c, 0x4a25256f, 0x4c26266a, 0x4e272769, 0x50282878, 0x5229297b,
                   0x542a2a7e, 0x562b2b7d, 0x582c2c74, 0x5a2d2d77, 0x5c2e2e72, 0x5e2f2f71,
                   0x60303050, 0x62313153, 0x64323256, 0x66333355, 0x6834345c, 0x6a35355f,
                   0x6c36365a, 0x6e373759, 0x70383848, 0x7239394b, 0x743a3a4e, 0x763b3b4d,
                   0x783c3c44, 0x7a3d3d47, 0x7c3e3e42, 0x7e3f3f41, 0x804040c0, 0x824141c3,
                   0x844242c6, 0x864343c5, 0x884444cc, 0x8a4545cf, 0x8c4646ca, 0x8e4747c9,
                   0x904848d8, 0x924949db, 0x944a4ade, 0x964b4bdd, 0x984c4cd4, 0x9a4d4dd7,
                   0x9c4e4ed2, 0x9e4f4fd1, 0xa05050f0, 0xa25151f3, 0xa45252f6, 0xa65353f5,
                   0xa85454fc, 0xaa5555ff, 0xac5656fa, 0xae5757f9, 0xb05858e8, 0xb25959eb,
                   0xb45a5aee, 0xb65b5bed, 0xb85c5ce4, 0xba5d5de7, 0xbc5e5ee2, 0xbe5f5fe1,
                   0xc06060a0, 0xc26161a3, 0xc46262a6, 0xc66363a5, 0xc86464ac, 0xca6565af,
                   0xcc6666aa, 0xce6767a9, 0xd06868b8, 0xd26969bb, 0xd46a6abe, 0xd66b6bbd,
                   0xd86c6cb4, 0xda6d6db7, 0xdc6e6eb2, 0xde6f6fb1, 0xe0707090, 0xe2717193,
                   0xe4727296, 0xe6737395, 0xe874749c, 0xea75759f, 0xec76769a, 0xee777799,
                   0xf0787888, 0xf279798b, 0xf47a7a8e, 0xf67b7b8d, 0xf87c7c84, 0xfa7d7d87,
                   0xfc7e7e82, 0xfe7f7f81, 0x1b80809b, 0x19818198, 0x1f82829d, 0x1d83839e,
                   0x13848497, 0x11858594, 0x17868691, 0x15878792, 0x0b888883, 0x09898980,
                   0x0f8a8a85, 0x0d8b8b86, 0x038c8c8f, 0x018d8d8c, 0x078e8e89, 0x058f8f8a,
                   0x3b9090ab, 0x399191a8, 0x3f9292ad, 0x3d9393ae, 0x339494a7, 0x319595a4,
                   0x379696a1, 0x359797a2, 0x2b9898b3, 0x299999b0, 0x2f9a9ab5, 0x2d9b9bb6,
                   0x239c9cbf, 0x219d9dbc, 0x279e9eb9, 0x259f9fba, 0x5ba0a0fb, 0x59a1a1f8,
                   0x5fa2a2fd, 0x5da3a3fe, 0x53a4a4f7, 0x51a5a5f4, 0x57a6a6f1, 0x55a7a7f2,
                   0x4ba8a8e3, 0x49a9a9e0, 0x4faaaae5, 0x4dababe6, 0x43acacef, 0x41adadec,
                   0x47aeaee9, 0x45afafea, 0x7bb0b0cb, 0x79b1b1c8, 0x7fb2b2cd, 0x7db3b3ce,
                   0x73b4b4c7, 0x71b5b5c4, 0x77b6b6c1, 0x75b7b7c2, 0x6bb8b8d3, 0x69b9b9d0,
                   0x6fbabad5, 0x6dbbbbd6, 0x63bcbcdf, 0x61bdbddc, 0x67bebed9, 0x65bfbfda,
                   0x9bc0c05b, 0x99c1c158, 0x9fc2c25d, 0x9dc3c35e, 0x93c4c457, 0x91c5c554,
                   0x97c6c651, 0x95c7c752, 0x8bc8c843, 0x89c9c940, 0x8fcaca45, 0x8dcbcb46,
                   0x83cccc4f, 0x81cdcd4c, 0x87cece49, 0x85cfcf4a, 0xbbd0d06b, 0xb9d1d168,
                   0xbfd2d26d, 0xbdd3d36e, 0xb3d4d467, 0xb1d5d564, 0xb7d6d661, 0xb5d7d762,
                   0xabd8d873, 0xa9d9d970, 0xafdada75, 0xaddbdb76, 0xa3dcdc7f, 0xa1dddd7c,
                   0xa7dede79, 0xa5dfdf7a, 0xdbe0e03b, 0xd9e1e138, 0xdfe2e23d, 0xdde3e33e,
                   0xd3e4e437, 0xd1e5e534, 0xd7e6e631, 0xd5e7e732, 0xcbe8e823, 0xc9e9e920,
                   0xcfeaea25, 0xcdebeb26, 0xc3ecec2f, 0xc1eded2c, 0xc7eeee29, 0xc5efef2a,
                   0xfbf0f00b, 0xf9f1f108, 0xfff2f20d, 0xfdf3f30e, 0xf3f4f407, 0xf1f5f504,
                   0xf7f6f601, 0xf5f7f702, 0xebf8f813, 0xe9f9f910, 0xeffafa15, 0xedfbfb16,
                   0xe3fcfc1f, 0xe1fdfd1c, 0xe7fefe19, 0xe5ffff1a)

_invMixColumnTable = (0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927,
                      0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45,
                      0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb,
                      0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381,
                      0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf,
                      0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66,
                      0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28,
                      0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012,
                      0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec,
                      0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e,
                      0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd,
                      0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7,
                      0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89,
                      0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b,
                      0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815,
                      0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f,
                      0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa,
                      0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8,
                      0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36,
                      0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c,
                      0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742,
                      0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea,
                      0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4,
                      0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e,
                      0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360,
                      0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502,
                      0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87,
                      0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd,
                      0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3,
                      0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621,
                      0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f,
                      0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55,
                      0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26,
                      0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844,
                      0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba,
                      0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480,
                      0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce,
                      0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67,
                      0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929,
                      0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713,
                      0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed,
                      0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f,
                      0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3 )


class AES32(object):
    """
    入出力を、uint32 で行う版。平文、暗号文、鍵のいずれも
    128ビットなので、入出力はすべて、要素数4のuint32リスト
    で行われる。
    
    基本的に、入出力は uint16 に統一しているので、
    ラッピングしたクラスAESを用いるべき。
    """
    def __init__(self):
        self.subkey = [None for i in range(44)]
        self.data = [None for i in range(4)]

    def subkeyDump(self):
        return self.subkey[:]

    def state_dump(self, tag):
        buf = ["%.8x" % i for i in self.data]
        print tag + ", ".join(buf)

    def subBytes(self):     self.data = map(subWord, self.data)
    def invSubBytes(self):  self.data = map(invSubWord, self.data)
    def mixColumn(self):    self.data = map(mixColumn32, self.data)
    def invMixColumn(self): self.data = map(invMixColumn32, self.data)       
    def SBMX(self):         self.data = map(SBMX32, self.data)
    def invSBMX(self):      self.data = map(invSBMX32, self.data)
    def ShiftRows(self):    self.data = shiftRow128(self.data)
    def invShiftRows(self): self.data = invShiftRow128(self.data)

    def keyExpansion(self, key):
        def RotWord(word):        # word を，byte 単位で左に循環シフト
            [a0, a1, a2, a3] = _word2byte(word)
            return _byte2word(a1, a2, a3, a0)

        Nb, Nr, Nk = 4, 10, 4   # ブロック数, ラウンド数, 鍵のブロック数
        i = 0
        while( i < Nk ):
            #self.subkey[i] = self._byte2word( key[4*i], key[4*i+1], key[4*i+2], key[4*i+3] )
            self.subkey[i] = key[i]
            i = i + 1
        i = Nk
        while( i < Nb * (Nr + 1) ):
            temp = self.subkey[i-1]
            if( i % Nk == 0):
                temp = subWord( RotWord(temp) ) ^ _Rcon[ i/Nk - 1]
            self.subkey[i] = self.subkey[ i - Nk ] ^ temp
            i = i + 1

    def encrypt(self, plainText):
        assert len(plainText) == 4, "Invalid length of the input array"
        self.data = plainText[:]

        for i in range(4): # Key whitening
            self.data[i] ^= self.subkey[i]
        for i in range(1, 10): # Round operations
            self.ShiftRows()
            self.SBMX()
            #self.subBytes()
            #self.mixColumn()
            for j in range(4):
                self.data[j] ^= self.subkey[i*4+j]
        # Final round
        self.ShiftRows()
        self.subBytes()
        for i in range(4):
            self.data[i] ^= self.subkey[40+i]
        return self.data[:]

    def decrypt(self, cipherText):
        assert len(cipherText) == 4, "Invalid length of the input array"
        self.data = cipherText[:]
        for i in range(4):
            self.data[i] ^= self.subkey[40+i]
        for i in range(9, 0, -1):
            self.invShiftRows()
            self.invSBMX()
            #self.invSubBytes()
            #self.invMixColumn()
            for j in range(4):
                self.data[j] ^= _applyTable(self.subkey[4*i+j], _invMixColumnTable)
        self.invSubBytes()
        self.invShiftRows()
        for i in range(4):
            self.data[i] ^= self.subkey[i]
        return self.data[:]


class AES_unroll(object):
    """
    中間結果をすべて保持する実装．
    他のAESクラスと重複部分があるので，そのうち直す

    self.data[i] には，iラウンドの入力が入る．
    最初と最後の鍵加算が適用された上で格納されるのに注意．

    また，encrypt と decrypt で同じ結果を得るために，
    encrypt では昇順, decrypt では降順で self.data
    が埋まるのに注意．

    NIST のテストベクタにより検証済み.

    2010/Oct/7 Takeshi Sugawara
    """
    def __init__(self):
        self.subkey = [None for i in range(44)]
        self.data = [[None for i in range(4)] for i in range(11)]

    def subkeyDump(self):
        return self.subkey[:]

    def state_dump(self):
        for i in range(11):
            buf = ["%.8x" % j for j in self.data[i]]
            print "Rnd%d" % i, " ".join(buf)
        #print tag + ", ".join(buf)

    def encrypt(self, plainText):
        tmp1 = utility.uint16listToUint32list(plainText)
        tmp2 = self._encrypt(tmp1)
        return utility.uint32listToUint16list(tmp2)

    def keyExpansion(self, key):
        tmp1 = utility.uint16listToUint32list(key)
        self._keyExpansion(tmp1)

    def decrypt(self, cipherText):
        tmp1 = utility.uint16listToUint32list(cipherText)
        tmp2 = self._decrypt(tmp1)
        return utility.uint32listToUint16list(tmp2)

    def _keyExpansion(self, key):
        def RotWord(word):        # word を，byte 単位で左に循環シフト
            [a0, a1, a2, a3] = _word2byte(word)
            return _byte2word(a1, a2, a3, a0)

        Nb, Nr, Nk = 4, 10, 4   # ブロック数, ラウンド数, 鍵のブロック数
        i = 0
        while( i < Nk ):
            #self.subkey[i] = self._byte2word( key[4*i], key[4*i+1], key[4*i+2], key[4*i+3] )
            self.subkey[i] = key[i]
            i = i + 1
        i = Nk
        while( i < Nb * (Nr + 1) ):
            temp = self.subkey[i-1]
            if( i % Nk == 0):
                temp = subWord( RotWord(temp) ) ^ _Rcon[ i/Nk - 1]
            self.subkey[i] = self.subkey[ i - Nk ] ^ temp
            i = i + 1

    def _encrypt(self, plainText):
        assert len(plainText) == 4, "Invalid length of the input array"
        for i in range(4): # Key whitening
            self.data[0][i] = plainText[i] ^ self.subkey[i]
        for i in range(1, 10): # Round operations
            tmp = self.data[i-1]
            tmp = shiftRow128(tmp)
            tmp = map(SBMX32, tmp)
            for j in range(4):
                self.data[i][j] = tmp[j] ^ self.subkey[i*4+j]
        # Final round
        tmp = self.data[9]
        tmp = shiftRow128(tmp)
        tmp = map(subWord, tmp)
        for j in range(4):
            self.data[10][j] = tmp[j] ^ self.subkey[40+j]
        return self.data[10][:]

    def _decrypt(self, cipherText):
        assert len(cipherText) == 4, "Invalid length of the input array"
        self.data[10] = cipherText[:]
        tmp = [0, 0, 0, 0]
        for i in range(4): # Key whitening
            tmp[i] = self.data[10][i] ^ self.subkey[40+i]
        tmp = map(invSubWord, tmp)
        tmp = invShiftRow128(tmp)
        self.data[9] = tmp
        
        for i in range(9, 0, -1):
            tmp = self.data[i][:]
            for j in range(4):
                tmp[j] ^= self.subkey[4*i+j]
            # ラウンド入力が欲しい場合，invSBMX は使えない．
            # なぜなら，ラウンド入力が，ちょうどSBとMXの間にあるから
            tmp = map(invMixColumn32, tmp)
            tmp = invShiftRow128(tmp)
            tmp = map(invSubWord, tmp)
            self.data[i-1] = tmp

        result = [self.data[0][i] ^ self.subkey[i] for i in range(4)]
        return result

class AES(AES32):
    """
    入出力を、uint16 で行う版。平文、暗号文、鍵のいずれも
    128ビットなので、入出力はすべて、要素数8のuint16リスト
    で行われる。
    """
    def encrypt(self, plainText):
        tmp1 = utility.uint16listToUint32list(plainText)
        tmp2 = super(AES, self).encrypt(tmp1)
        return utility.uint32listToUint16list(tmp2)

    def decrypt(self, cipherText):
        tmp1 = utility.uint16listToUint32list(cipherText)
        tmp2 = super(AES, self).decrypt(tmp1)
        return utility.uint32listToUint16list(tmp2)

    def keyExpansion(self, key):
        tmp1 = utility.uint16listToUint32list(key)
        super(AES, self).keyExpansion(tmp1)

class FaultyAES(AES32):
    def keyExpansion(self, key):
        tmp1 = utility.uint16listToUint32list(key)
        super(FaultyAES, self).keyExpansion(tmp1)
    
    def encrypt(self, plainText, pos=0):
        tmp1 = utility.uint16listToUint32list(plainText)
        tmp2 = self._encrypt32(tmp1, pos)
        return utility.uint32listToUint16list(tmp2)
        
    def _encrypt32(self, plainText, pos):
        import random

        assert len(plainText) == 4, "Invalid length of the input array"
        self.data = plainText[:]

        for i in range(4): # Key whitening
            self.data[i] ^= self.subkey[i]
        for i in range(1, 9): # Round operations
            self.ShiftRows()
            self.SBMX()
            for j in range(4):
                self.data[j] ^= self.subkey[i*4+j]

        # One byte fault at the 9-th round input
        byteError = random.randrange(0, 2**8) # Fault
        byteError = byteError
        #self.data[0] ^= byteError
        self.ShiftRows()
        self.data[pos] ^= byteError
        self.SBMX()
        for j in range(4):
            self.data[j] ^= self.subkey[4*9+j]
        
        # Final round
        self.ShiftRows()
        self.subBytes()
        for i in range(4):
            self.data[i] ^= self.subkey[40+i]
        return self.data[:]
    
def genVector(key, N):
    import random
    
    aobj = AES()
    aobj.keyExpansion(key)
    pt_list = []
    ct_list = []
    for i in range(N):
        pt = [random.randrange(0, 2**16) for i in range(8)]
        ct = aobj.encrypt(pt)
        pt_list += [pt]
        ct_list += [ct]
    return (pt_list, ct_list)


def genVectorCTR(key, IV, N):
    def int2list(val):
        result = [0 for i in range(8)]
        for i in range(8):
            result[i] = val % (2**16)
            val /= (2**16)
        result.sort()
        return result
            
    aobj = AES()
    aobj.keyExpansion(key)
    pt_list = []
    ct_list = []
    for i in range(IV, IV+N):
        pt = int2list(i)
        ct = aobj.encrypt(pt)
        pt_list += [pt]
        ct_list += [ct]
    return (pt_list, ct_list)

    
def _test1(N=10):
    import random
    
    x = AES()
    print "Test for %d different (key, plaintext)" % N
    for i in range(N):
        key = [random.randrange(0, 2**16) for i in range(8)]
        pt = [random.randrange(0, 2**16) for i in range(8)]
        x.keyExpansion(key)
        ct = x.encrypt(pt)
        result = x.decrypt(ct)
        if pt != result:
            utility.uint16Print(pt)
            utility.uint16Print(key)
            utility.uint16Print(ct)
            utility.uint16Print(result)
            raise Exception("Error during test")
    print "Test finished"

    
if __name__ == "__main__":
    key = [0x2b7e, 0x1516, 0x28ae, 0xd2a6, 0xabf7, 0x1588, 0x09cf, 0x4f3c]
    #pt  = [0xc67e, 0x816b, 0x4bfb, 0xe2fb, 0x54f6, 0xbddf, 0x7c1c, 0xe187]
    pt  = [0x3243, 0xf6a8, 0x885a, 0x308d, 0x3131, 0x98a2, 0xe037, 0x0734]
    #x = AES()
    x = AES_unroll()
    x.keyExpansion(key)
    ct= x.encrypt(pt)
    x.state_dump()
    result = x.decrypt(ct)


    print "Key:",
    utility.uint16Print(key)
    print "PT: ", 
    utility.uint16Print(pt)
    print "CT: ",
    utility.uint16Print(ct)
    print "PT: ",
    utility.uint16Print(result)
 
    #_test1()
    #(pt_list, ct_list) = genVectorCTR(key, 0, 10)
    #print pt_list
    #print ct_list
    #
    #for (x, y) in zip(pt_list, ct_list):
    #    #print "PT: ", 
    #    #utility.uint16Print(x)
    #    print "CT: ",
    #    utility.uint16Print(y)
        
